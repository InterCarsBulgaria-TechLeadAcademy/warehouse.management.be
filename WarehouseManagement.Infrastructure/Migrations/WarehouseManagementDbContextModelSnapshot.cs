// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseManagement.Infrastructure.Data;

#nullable disable

namespace WarehouseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseManagementDbContext))]
    partial class WarehouseManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cmr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Packages")
                        .HasColumnType("int");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<string>("ReceptionNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DeliveryMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.HasKey("MarkerId", "DeliveryId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("DeliveriesMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Difference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Count")
                        .HasMaxLength(2147483647)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("InternalNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReceptionNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Differences");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DifferenceTypes");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EntityChanges");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Packages")
                        .HasColumnType("int");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoleRoutePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "RoutePermissionId");

                    b.HasIndex("RoutePermissionId");

                    b.ToTable("RoleRoutePermission");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RoutePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8abee68a-22e6-4795-af74-e9bae7df712d"),
                            ActionName = "SignIn",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("99ffcfb0-7d10-481e-8530-d1bdf99a7f7c"),
                            ActionName = "SignUp",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9f60c085-dcf9-4241-a1d2-2debc6b0ade3"),
                            ActionName = "Refresh",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("39ab107e-4b06-41d8-b0d5-e4e11af17aef"),
                            ActionName = "Logout",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("49e73ff6-04d3-4beb-a1e6-75f22b74e077"),
                            ActionName = "GetDelivery",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1e113fe8-0b69-4be3-b783-082a291c1587"),
                            ActionName = "GetDeliveries",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e5123e76-631b-4ea1-b6df-88002b8d5d59"),
                            ActionName = "Add",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3b14fb3b-e21e-4b40-b2ce-42e4fba44d98"),
                            ActionName = "Edit",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e5dda1f8-e431-4a86-879d-0abe4dfdcdc7"),
                            ActionName = "Delete",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("39e90d41-da2c-44e1-b8d7-ab59a8cbc66f"),
                            ActionName = "Restore",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("968d31bd-2d50-442d-be71-6dfc924af994"),
                            ActionName = "AllDeleted",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0b49a008-c018-4acd-90b3-a08cfbf393c4"),
                            ActionName = "GetHistory",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d2e32e26-95cb-4f52-88ad-3ba92255e824"),
                            ActionName = "Approve",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("70bf9c60-a7cf-4d57-b1e7-b192fdaa55eb"),
                            ActionName = "All",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9e0e86ee-ff0c-49a7-881f-3cd72138218d"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1bdbf393-1308-4054-9eaf-7cd7b65ada86"),
                            ActionName = "GetById",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fbda2c57-bf40-4a37-9123-d3eb94a8e5b7"),
                            ActionName = "Add",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("18252657-f04e-497f-b1e9-b3f945f563e3"),
                            ActionName = "Edit",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c46882bc-99f9-4d72-95c6-ab30f6eac857"),
                            ActionName = "Delete",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7a69c406-a2cd-4604-a7a3-6b2df08da3e7"),
                            ActionName = "Restore",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7598dda9-ab15-43c7-a215-a667ca4b4b1d"),
                            ActionName = "StartProcessing",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8a5c65a5-10dd-4b9a-969b-a286d4b0cd5e"),
                            ActionName = "FinishProcessing",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5961248b-38b2-48ec-afde-468d15136b43"),
                            ActionName = "NoDifferences",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a37336f4-01f0-4bc3-b669-c04e258c998d"),
                            ActionName = "All",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("87d0104e-0cad-4d9e-a83b-c7180ea25a3c"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e4a9ffd6-82b3-4884-8fdf-8b1b42b3157e"),
                            ActionName = "GetById",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("36935ca8-e05c-4c95-868a-a7a54b1f6c0f"),
                            ActionName = "Add",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("88d91cf3-8cab-4ac8-b3cb-6a8071df7985"),
                            ActionName = "Edit",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9398c93a-7614-4209-8f66-0b9294e77f04"),
                            ActionName = "Delete",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cd17679c-2479-4f62-bc4c-45d3985e7ce9"),
                            ActionName = "Restore",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7fa1ac80-b4af-4be2-966e-00dec1b366d6"),
                            ActionName = "All",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59f6c50d-bf95-4f6c-ad03-183a3c456be2"),
                            ActionName = "GetById",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f7771647-818d-4483-ad20-c08809835034"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("58e984cd-6941-4a78-a5e5-dae400e48b7c"),
                            ActionName = "Add",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f38fe8bc-f73f-442e-8283-bb79d6aa94f7"),
                            ActionName = "Edit",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c1ad7c4a-faf1-4baa-94fe-ea1de779d758"),
                            ActionName = "Delete",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0ee63829-f237-4204-a7af-c425e6b18b72"),
                            ActionName = "Restore",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("db0be472-ae5d-441c-8363-d6d9afb382f4"),
                            ActionName = "StartProcessing",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("645b7d2f-20af-41b2-98d4-708ba7d08a66"),
                            ActionName = "FinishProcessing",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aab5ca97-0de2-4cb7-86b3-0c5c32b91731"),
                            ActionName = "Move",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fd52508a-25e5-4174-91d1-1535ca7d3549"),
                            ActionName = "Split",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fa661482-15a4-4e3d-858e-5db9811f4ed9"),
                            ActionName = "GetMarker",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("39f63c45-a19e-4051-9cfe-c20d48c0a8f2"),
                            ActionName = "GetAll",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("72a09570-26ba-4ade-96c7-e163a395f7f7"),
                            ActionName = "GetAll",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("37b76e9b-4735-43ce-a476-995032cb7358"),
                            ActionName = "Add",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("87db784e-83a5-4ef8-aad9-602aabff4438"),
                            ActionName = "Edit",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b5284213-d20a-43cc-804c-6bcc4999b8e4"),
                            ActionName = "Delete",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3f684d24-8b41-428d-9d16-f214390b5459"),
                            ActionName = "Restore",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3166906a-e173-4278-9175-b2ef028c2a55"),
                            ActionName = "GetDeletedMarkers",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e1c62105-4f16-4746-94fb-0f1b599ae760"),
                            ActionName = "AddUserToRole",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("237aa22e-8455-44e9-a7ea-8330c1e4c0f3"),
                            ActionName = "Create",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4e3155e9-cb1b-4056-ac5f-a06eea066b5d"),
                            ActionName = "Edit",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e0e9774b-1244-4df7-aa45-3428ad2e58e1"),
                            ActionName = "Delete",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5a77c1f2-3b8e-475d-b093-fb5aa0883e9f"),
                            ActionName = "GetAll",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b3ec2088-0826-47b9-9ec8-206feb8a9ee2"),
                            ActionName = "GetByName",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fd296bbf-ac43-406c-b5d8-414535b2d686"),
                            ActionName = "GetAll",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6946b8c2-4b9f-4785-bb1d-cae7fe149849"),
                            ActionName = "GetAllWithDeleted",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("45f63579-0d4e-4113-aaaf-b3434deaea7a"),
                            ActionName = "GetById",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("84938c3e-3020-400c-90ec-884d9d5c8c14"),
                            ActionName = "Delete",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("01d3db6f-14a5-452c-acd3-70d3769461fd"),
                            ActionName = "GetVendor",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8fe3e40a-8d76-460c-8e4f-93fedbc00d0f"),
                            ActionName = "All",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cdb4e120-65dd-466f-9400-3235ad59944e"),
                            ActionName = "Add",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5255ef9a-8d43-41bf-9c37-96331fa953d9"),
                            ActionName = "Edit",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1971375a-6333-4395-be4e-ecbaea15bdc0"),
                            ActionName = "Delete",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d30b81f8-328e-450a-b987-27e04e7f8048"),
                            ActionName = "Restore",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("21e9ad37-7460-4e86-826e-d1e991ded705"),
                            ActionName = "AllDeleted",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2b10ec34-80e8-4768-8c62-aaa3209763a2"),
                            ActionName = "GetById",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0ef49517-dbcf-41ce-a2ac-2907faf0776f"),
                            ActionName = "GetAll",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ca750589-fdf1-4d86-b6f9-bdda25037d81"),
                            ActionName = "GetAll",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8faae285-742a-4e87-8dad-9b0161149b4d"),
                            ActionName = "Add",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bf6e06b6-ad42-4071-90bb-02d216767d89"),
                            ActionName = "Edit",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7f757a2f-23bf-493a-aaf0-a4daad2d2f9c"),
                            ActionName = "Delete",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ae1aeba5-cb4f-4fdc-9ffd-51fbe117b6ad"),
                            ActionName = "Restore",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("99f9eddf-fdf3-458e-aaee-865c520eaa06"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e852de35-9c19-4fee-ac0d-1a481faaf5e5"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2f125a94-e01f-4095-b8ce-e2a5ca5d2c35"),
                            ActionName = "Entries",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("MarkerId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorsMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorsZones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ZoneMarker", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "MarkerId");

                    b.HasIndex("MarkerId");

                    b.ToTable("ZonesMarkers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("Deliveries")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DeliveryMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("DeliveriesMarkers")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("DeliveriesMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Marker");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Difference", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Differences")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", "Type")
                        .WithMany("Differences")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("Differences")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Type");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Entry", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Entries")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("Entries")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoleRoutePermission", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", "Role")
                        .WithMany("RoleRoutePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", "RoutePermission")
                        .WithMany("RoleRoutePermissions")
                        .HasForeignKey("RoutePermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoutePermission");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("VendorsMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("VendorsMarkers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marker");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorZone", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("VendorsZones")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("VendorsZones")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ZoneMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("ZonesMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("ZonesMarkers")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marker");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Navigation("RoleRoutePermissions");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Navigation("DeliveriesMarkers");

                    b.Navigation("Differences");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", b =>
                {
                    b.Navigation("Differences");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Marker", b =>
                {
                    b.Navigation("DeliveriesMarkers");

                    b.Navigation("VendorsMarkers");

                    b.Navigation("ZonesMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", b =>
                {
                    b.Navigation("RoleRoutePermissions");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("VendorsMarkers");

                    b.Navigation("VendorsZones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Zone", b =>
                {
                    b.Navigation("Differences");

                    b.Navigation("Entries");

                    b.Navigation("VendorsZones");

                    b.Navigation("ZonesMarkers");
                });
#pragma warning restore 612, 618
        }
    }
}
