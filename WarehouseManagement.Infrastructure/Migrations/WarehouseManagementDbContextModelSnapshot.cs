// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseManagement.Infrastructure.Data;

#nullable disable

namespace WarehouseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseManagementDbContext))]
    partial class WarehouseManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cmr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Packages")
                        .HasColumnType("int");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<string>("ReceptionNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DeliveryMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.HasKey("MarkerId", "DeliveryId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("DeliveriesMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Difference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Count")
                        .HasMaxLength(2147483647)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("InternalNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReceptionNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Differences");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DifferenceTypes");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EntityChanges");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Packages")
                        .HasColumnType("int");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoleRoutePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "RoutePermissionId");

                    b.HasIndex("RoutePermissionId");

                    b.ToTable("RoleRoutePermission");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RoutePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3688312-0d05-4940-a88c-30c2ab562be9"),
                            ActionName = "SignIn",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("814a8084-265a-4cfa-9ece-167b17b3b4f1"),
                            ActionName = "SignUp",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("73e9bd2f-c14c-4630-8fe6-f9a2f1bf260c"),
                            ActionName = "Refresh",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ff7b988b-f4c5-4fde-97cb-56afa5edeb34"),
                            ActionName = "Logout",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bcc9e281-c73d-46b2-9bd3-3635f3d52458"),
                            ActionName = "GetDelivery",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("86a55b61-7416-4721-b33d-295bb7e7526b"),
                            ActionName = "GetDeliveries",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8047493a-b861-4c3f-bee5-f907a079188c"),
                            ActionName = "Add",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b06c59a6-df21-4436-b24f-74c3a853a0fe"),
                            ActionName = "Edit",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e59c8365-9e3b-4142-b2b9-4591055d3c1b"),
                            ActionName = "Delete",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("22be0299-3e6a-4196-92b5-227f3d472119"),
                            ActionName = "Restore",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3c11e187-437b-45bf-8caa-0e37285c3b6f"),
                            ActionName = "AllDeleted",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8cb5cd6e-1240-470a-a299-033a69667431"),
                            ActionName = "GetHistory",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fad5cdae-95b4-412b-9fa0-8484794f4e70"),
                            ActionName = "Approve",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a5bc4dfd-85fe-4730-8c94-3b593ebef8c0"),
                            ActionName = "GenerateBarcodePdf",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bdcc7f49-78a6-40a4-9b02-85c1a1c11c8f"),
                            ActionName = "All",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fb9fc971-14b1-443a-8a58-032134675c7e"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e2032701-057a-416d-9b26-cb31cb423c20"),
                            ActionName = "GetById",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ccb74a66-1eb7-48a0-9e97-27332ea1337b"),
                            ActionName = "Add",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b15f05f3-7b03-4557-b015-fe2a33c45891"),
                            ActionName = "Edit",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("158804f9-c382-490e-9e44-46e275561519"),
                            ActionName = "Delete",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bcc23b4c-7859-4a9b-9b8c-ee6b011e2d23"),
                            ActionName = "Restore",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2e5a213f-ab9c-4ee0-a636-c45b3bc99fef"),
                            ActionName = "StartProcessing",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7761c8ca-65d5-4820-8e9c-c05e68a33395"),
                            ActionName = "FinishProcessing",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("56530054-5033-4b2f-8be5-d0f8882f4c5b"),
                            ActionName = "NoDifferences",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7ae10f2b-683b-40a7-a6df-4648e5bce1cd"),
                            ActionName = "All",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10b56ab4-9436-4e38-9e9f-bd63f6461a81"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3f9f0f89-712d-41ab-ba21-85bc80e1b1f5"),
                            ActionName = "GetById",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ec7c4587-b945-4e74-a29f-26ccc0a946c4"),
                            ActionName = "Add",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("68df5521-10cf-496a-b344-b874eba79682"),
                            ActionName = "Edit",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ff055215-7454-437a-b593-96471525b1ae"),
                            ActionName = "Delete",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("08f39727-5aa6-4ec3-8836-9bae540b095a"),
                            ActionName = "Restore",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e38ab8e9-e548-46ab-be74-76e111f788df"),
                            ActionName = "All",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c2d99ac1-39f5-43f0-b3c2-ddfb1c5827e5"),
                            ActionName = "GetById",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("00e3f5f5-97d0-493c-90a3-3a7cf8adf9bd"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9617f591-839e-4ce1-a4cb-6b5bab1c3061"),
                            ActionName = "Add",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("62f6c21e-ebb5-4048-973b-8da69cd05a4f"),
                            ActionName = "Edit",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9181982e-e34b-409d-8a01-c8de1716a37f"),
                            ActionName = "Delete",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("06b4a9c3-52bb-45d5-ba00-503878310c98"),
                            ActionName = "Restore",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5cc63b02-72c9-42bf-8525-2a6d21174e1d"),
                            ActionName = "StartProcessing",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ffc7afa0-53ff-4eff-ac9e-7c628242cade"),
                            ActionName = "FinishProcessing",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1668837b-2dec-4964-94d9-9daa6456e8a8"),
                            ActionName = "Move",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("85bbbd64-49e8-4274-977d-3f7d11887672"),
                            ActionName = "Split",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ee305deb-4f71-434c-a0e4-300acbe2faea"),
                            ActionName = "GetMarker",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3b1545a4-6fcc-4fd6-ba9e-0e34f94578af"),
                            ActionName = "GetAll",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("74923801-25bc-4401-b4a7-d3cf1794eb61"),
                            ActionName = "GetAll",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("459fdfc6-ee7a-4743-9313-1053ddc5336b"),
                            ActionName = "Add",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e3944cab-e13e-4a02-bc10-a0440898837e"),
                            ActionName = "Edit",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b6d91cec-79a5-40b1-97e8-cb2921c1c620"),
                            ActionName = "Delete",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8bd90da1-b9f2-4263-b93e-a887a13dd7f8"),
                            ActionName = "Restore",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f6da031b-6ee2-4551-b893-425035b7bb6b"),
                            ActionName = "GetDeletedMarkers",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0876e417-f6be-4018-87b0-5263a9c02fa8"),
                            ActionName = "AddUserToRole",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e84ca46e-2aa9-4c8f-b683-184a55ee3845"),
                            ActionName = "Create",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5982d2d0-a13c-4677-bf57-3101f207fda9"),
                            ActionName = "Edit",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d3f64546-13d1-4d50-9f5f-f78941dd9364"),
                            ActionName = "Delete",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("264e6a14-e7e2-4f9e-8e3d-017c84e1d9bb"),
                            ActionName = "GetAll",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9e34ab9f-cfee-42d8-bd66-1e45210511f9"),
                            ActionName = "GetById",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b62d9453-f28e-4553-a886-20a5a1271057"),
                            ActionName = "GetAll",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1253074d-fd4d-4534-8c9b-06049c006a72"),
                            ActionName = "GetAllWithDeleted",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("81b08fc1-d0a4-419e-9ea1-945bb8f61cde"),
                            ActionName = "GetById",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("74ccaec5-4f74-4b06-a104-822bd17aa111"),
                            ActionName = "Delete",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d103d32a-ecae-4749-8e62-ffc80eeb67af"),
                            ActionName = "GetAll",
                            ControllerName = "User",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b94b6d16-96da-46c4-b11e-3705780f1e36"),
                            ActionName = "GetUserInfo",
                            ControllerName = "User",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8ddfa6d2-ee80-4e06-9c73-4ac03fa47b3d"),
                            ActionName = "GetVendor",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a685edd2-7710-4337-bac8-1e2ef3fb9e4a"),
                            ActionName = "All",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("50fe8d2c-629c-4dcd-815f-99fd06065f69"),
                            ActionName = "Add",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("054a66a8-8fca-4b94-86cb-e5559fa7b027"),
                            ActionName = "Edit",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e0548499-1dc7-400f-91e3-0e2ebe5eb15c"),
                            ActionName = "Delete",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("196a7170-8fc0-446c-a1fc-cc8da1f70f98"),
                            ActionName = "Restore",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("212492ec-8b5f-4d6c-858d-fd9f819e83f4"),
                            ActionName = "AllDeleted",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1226cde4-8c42-46b4-9880-297a0b5a8fc3"),
                            ActionName = "GetById",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("57960fd5-e0e4-4105-9080-58392715a056"),
                            ActionName = "GetAll",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("410b385e-e757-4a0f-b078-acf5b2c0fd0b"),
                            ActionName = "GetAll",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("67d22a57-4edd-4b98-bad0-613742c13192"),
                            ActionName = "Add",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ab8f1e49-4d2c-45ff-9ee4-f78d40cf0fb0"),
                            ActionName = "Edit",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2caf782c-01c9-4296-be66-824eefbdcaf4"),
                            ActionName = "Delete",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ab7a2262-723e-4ca9-bff2-ad330cf67ca1"),
                            ActionName = "Restore",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("12e14bd1-fe0a-4ca5-9b31-1aa3d1da5aab"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ce296956-feba-43d8-b8e0-0aca5285e174"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("68812d08-339e-45e4-a7ad-973bb91f2db3"),
                            ActionName = "Entries",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("MarkerId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorsMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorsZones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ZoneMarker", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "MarkerId");

                    b.HasIndex("MarkerId");

                    b.ToTable("ZonesMarkers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany("SubUsers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("Deliveries")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DeliveryMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("DeliveriesMarkers")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("DeliveriesMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Marker");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Difference", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Differences")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", "Type")
                        .WithMany("Differences")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("Differences")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Type");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Entry", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Entries")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("Entries")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoleRoutePermission", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", "Role")
                        .WithMany("RoleRoutePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", "RoutePermission")
                        .WithMany("RoleRoutePermissions")
                        .HasForeignKey("RoutePermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoutePermission");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("VendorsMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("VendorsMarkers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marker");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorZone", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("VendorsZones")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("VendorsZones")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ZoneMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("ZonesMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("ZonesMarkers")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marker");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Navigation("RoleRoutePermissions");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("SubUsers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Navigation("DeliveriesMarkers");

                    b.Navigation("Differences");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", b =>
                {
                    b.Navigation("Differences");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Marker", b =>
                {
                    b.Navigation("DeliveriesMarkers");

                    b.Navigation("VendorsMarkers");

                    b.Navigation("ZonesMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", b =>
                {
                    b.Navigation("RoleRoutePermissions");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("VendorsMarkers");

                    b.Navigation("VendorsZones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Zone", b =>
                {
                    b.Navigation("Differences");

                    b.Navigation("Entries");

                    b.Navigation("VendorsZones");

                    b.Navigation("ZonesMarkers");
                });
#pragma warning restore 612, 618
        }
    }
}
