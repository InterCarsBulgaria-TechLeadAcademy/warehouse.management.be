// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseManagement.Infrastructure.Data;

#nullable disable

namespace WarehouseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseManagementDbContext))]
    [Migration("20240908084504_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cmr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Packages")
                        .HasColumnType("int");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<string>("ReceptionNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DeliveryMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.HasKey("MarkerId", "DeliveryId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("DeliveriesMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Difference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Count")
                        .HasMaxLength(2147483647)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("InternalNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReceptionNumber")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Differences");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("DifferenceTypes");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EntityChanges");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Packages")
                        .HasColumnType("int");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedProcessing")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoleRoutePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "RoutePermissionId");

                    b.HasIndex("RoutePermissionId");

                    b.ToTable("RoleRoutePermission");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RoutePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c9ce5e2-c1b6-45a5-93d5-3824a6c9bab3"),
                            ActionName = "SignIn",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b61ee426-f26b-4cb4-9fe8-b1fe62e1ff00"),
                            ActionName = "SignUp",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a65a0a2d-841c-4527-9141-f76485e3168d"),
                            ActionName = "Refresh",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d1e17dbe-5046-4067-9c2f-4ba64ed147e4"),
                            ActionName = "Logout",
                            ControllerName = "Auth",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3e307bd0-3afc-459a-9a86-ac0f04a6b222"),
                            ActionName = "GetDelivery",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("199fd0fa-5b02-4600-b423-b8ccd9477309"),
                            ActionName = "GetDeliveries",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("704b778c-3ce9-4ab0-a0ce-297c37103b05"),
                            ActionName = "Add",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1691e077-0415-4d3f-9e87-20e1828a581c"),
                            ActionName = "Edit",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6dda8951-f302-49ad-bdc5-1de94cc1e014"),
                            ActionName = "Delete",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("26b4efac-5d66-412c-9d27-f4feb8d23dc9"),
                            ActionName = "Restore",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6fe1fbc2-7302-4f67-a384-4ed85fac6da1"),
                            ActionName = "AllDeleted",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("036fbe38-a05b-441d-b340-079fb400bec9"),
                            ActionName = "GetHistory",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f5f40be4-0de1-400e-aa64-aadeb36b174a"),
                            ActionName = "Approve",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a312b7aa-e482-4e0e-a235-458fc0312dba"),
                            ActionName = "GenerateBarcodePdf",
                            ControllerName = "Delivery",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("50018b07-8c79-4535-a7fa-81efa4521f79"),
                            ActionName = "All",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("05e5e54e-ea91-46de-9d2a-dd9e4f6169c2"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("71716e3a-7c0f-4800-8013-7d9d2a264d17"),
                            ActionName = "GetById",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bd304750-d66a-4ea5-9db6-6aca33789e55"),
                            ActionName = "Add",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("35f46d2c-f1a4-4410-8fdb-b534f272d9fa"),
                            ActionName = "Edit",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("05267eef-25b2-44ed-a942-d5a0dd91ac5f"),
                            ActionName = "Delete",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("42413eda-85af-48a5-8e28-108a2ff7b7e6"),
                            ActionName = "Restore",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c3740cff-8052-4675-9781-fff2f3439a7e"),
                            ActionName = "StartProcessing",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cb92cd51-166e-48ae-8be5-2f26c1463ff0"),
                            ActionName = "FinishProcessing",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("12e4f247-1584-4387-8ee2-434b6e5ac245"),
                            ActionName = "NoDifferences",
                            ControllerName = "Difference",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3cab7050-f9c9-4074-91f7-0c6d6df0ae01"),
                            ActionName = "All",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f5e166b2-a7e7-4ed8-b202-3fb9ef97f402"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9dd79002-2511-42bc-8e4e-23bc1107270c"),
                            ActionName = "GetById",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d39fc343-3b5f-4e1a-b841-ca373fc0b26e"),
                            ActionName = "Add",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("18391c14-7164-462f-8774-8c39e55c4eaf"),
                            ActionName = "Edit",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fc5794e9-2cd8-4763-a3aa-de159ac96e3a"),
                            ActionName = "Delete",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1401371e-938b-4bcd-9b67-6c9f82176aae"),
                            ActionName = "Restore",
                            ControllerName = "DifferenceType",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7c198f1d-7465-4a41-bb80-be9004ec8201"),
                            ActionName = "All",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4dfdb549-3418-47a5-b0e4-0e0bcfd40da4"),
                            ActionName = "GetById",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("685fd06d-f958-47d4-9515-c2b0b3a41d9b"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f600d2ea-7d91-442d-8eb3-80d9ab4b800e"),
                            ActionName = "Add",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6eab15e7-d2de-4a60-8b4f-2ffd3cc23161"),
                            ActionName = "Edit",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4917e6c9-b153-42ec-b0d6-8d33484dc1e1"),
                            ActionName = "Delete",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b48d8ad6-64ca-4305-a489-81c99dc3fa69"),
                            ActionName = "Restore",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d5bc1488-89c5-4b14-96bb-ebbc14de809c"),
                            ActionName = "StartProcessing",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b6b79ebe-7468-44cf-b085-e38703e249c4"),
                            ActionName = "FinishProcessing",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e04b73d9-92e3-464b-b797-bd867ca23f77"),
                            ActionName = "Move",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("70ab4c71-8b1b-4dbf-a2c8-7772f23df95d"),
                            ActionName = "Split",
                            ControllerName = "Entry",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("49bfc9ca-d833-4430-bb35-702dd4bcc365"),
                            ActionName = "GetMarker",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("80e394c7-2fe7-463a-8b74-017ebffaf25a"),
                            ActionName = "GetAll",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("69c376e4-59cf-4e63-9e8d-620a95b4f820"),
                            ActionName = "GetAll",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("22b4665c-eb09-4395-8938-3139fc6c65e3"),
                            ActionName = "Add",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b8fe3b15-754e-4496-acd6-6b6b4eb50a6e"),
                            ActionName = "Edit",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7b47a22d-78cc-4d4c-847f-a81c4627be16"),
                            ActionName = "Delete",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ac506d7b-0a50-4480-86b0-4b869943b26b"),
                            ActionName = "Restore",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f24ea4f1-f95f-4a59-8617-755b1a92f1fe"),
                            ActionName = "GetDeletedMarkers",
                            ControllerName = "Marker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("120c1003-e41d-4c1e-ba40-430221f89d68"),
                            ActionName = "AddUserToRole",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d3542abf-ea63-4723-9a12-c6d74f3e5865"),
                            ActionName = "Create",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9d0c67ed-02eb-4651-afdb-616ef5a986af"),
                            ActionName = "Edit",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b04da6ce-7abe-4424-831a-dbbc19e478de"),
                            ActionName = "Delete",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1afb462c-3110-45f3-b0dc-1c66d57ef1a7"),
                            ActionName = "GetAll",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6ec0dd51-5e77-4d3c-b1a7-3e5a2dcb2efb"),
                            ActionName = "GetById",
                            ControllerName = "Role",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d075a354-415d-4ae9-b65b-a76e59429441"),
                            ActionName = "GetAll",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a0ba9264-2668-4da1-87c6-9ce32a0a1bd2"),
                            ActionName = "GetAllWithDeleted",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d82940c2-ce98-4e49-a3fa-26ccaa733c08"),
                            ActionName = "GetById",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c999f1e5-d503-4997-93ef-503f48a8a5d5"),
                            ActionName = "Delete",
                            ControllerName = "RoutePermission",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("87c6ab03-0bb2-4d5a-a22c-c33b973d38a1"),
                            ActionName = "GetAll",
                            ControllerName = "User",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6b331c84-cc69-4fca-ab1e-16dcf99f3718"),
                            ActionName = "GetUserInfo",
                            ControllerName = "User",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2b6a5213-434f-4595-a86b-f9a926b6df69"),
                            ActionName = "Delete",
                            ControllerName = "User",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("63a50e8d-4252-489f-beee-d250998b9316"),
                            ActionName = "GetVendor",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e750a09d-ac49-4228-b25b-63d3fb88762c"),
                            ActionName = "All",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b19ab4a7-7b6e-4d78-bab0-4b4cf9fe2c0e"),
                            ActionName = "Add",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("44e62a94-18b3-47c5-b850-51976877f427"),
                            ActionName = "Edit",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b1f26850-4a5e-45b2-bdfd-b921cea310e7"),
                            ActionName = "Delete",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8d6c80e0-b4fe-4c13-8225-293461174729"),
                            ActionName = "Restore",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6d7fc028-417d-499f-a641-805a5a3c19e7"),
                            ActionName = "AllDeleted",
                            ControllerName = "Vendor",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5b3e8957-8808-4ce7-a047-8dfb75056c8d"),
                            ActionName = "GetById",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("afb25ae2-df13-4cfa-a14a-5137bf5784a7"),
                            ActionName = "GetAll",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d2314507-a4a3-46ff-b347-97dfdab0516d"),
                            ActionName = "GetAll",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4d007c7e-22ab-450a-9a8a-f577eca56a9d"),
                            ActionName = "Add",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bb3c7f6e-7e46-4fae-8f59-24200b275010"),
                            ActionName = "Edit",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7339c1f9-8d21-4c95-9fc8-69f627de6560"),
                            ActionName = "Delete",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6bb958fd-bff5-49df-b03d-b900b0782de0"),
                            ActionName = "Restore",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0472a811-0eae-46a2-8547-b8cb0e486222"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aed430ea-90cb-49ba-a7dd-064e8bbc8ae2"),
                            ActionName = "AllWithDeleted",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("913c675b-f7db-4097-9aae-05001a515ed4"),
                            ActionName = "Entries",
                            ControllerName = "Zone",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedByUserId = "",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DefaultZoneId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultZoneId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("MarkerId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorsMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorsZones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ZoneMarker", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "MarkerId");

                    b.HasIndex("MarkerId");

                    b.ToTable("ZonesMarkers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany("SubUsers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("Deliveries")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DeliveryMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("DeliveriesMarkers")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("DeliveriesMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Marker");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Difference", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Differences")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", "Type")
                        .WithMany("Differences")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("Differences")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Type");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Entry", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Entries")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("Entries")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoleRoutePermission", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", "Role")
                        .WithMany("RoleRoutePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", "RoutePermission")
                        .WithMany("RoleRoutePermissions")
                        .HasForeignKey("RoutePermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoutePermission");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "DefaultZone")
                        .WithMany()
                        .HasForeignKey("DefaultZoneId");

                    b.Navigation("DefaultZone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("VendorsMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("VendorsMarkers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marker");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.VendorZone", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Vendor", "Vendor")
                        .WithMany("VendorsZones")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("VendorsZones")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ZoneMarker", b =>
                {
                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Marker", "Marker")
                        .WithMany("ZonesMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagement.Infrastructure.Data.Models.Zone", "Zone")
                        .WithMany("ZonesMarkers")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marker");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Navigation("RoleRoutePermissions");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("SubUsers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Navigation("DeliveriesMarkers");

                    b.Navigation("Differences");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.DifferenceType", b =>
                {
                    b.Navigation("Differences");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Marker", b =>
                {
                    b.Navigation("DeliveriesMarkers");

                    b.Navigation("VendorsMarkers");

                    b.Navigation("ZonesMarkers");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.RoutePermission", b =>
                {
                    b.Navigation("RoleRoutePermissions");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Vendor", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("VendorsMarkers");

                    b.Navigation("VendorsZones");
                });

            modelBuilder.Entity("WarehouseManagement.Infrastructure.Data.Models.Zone", b =>
                {
                    b.Navigation("Differences");

                    b.Navigation("Entries");

                    b.Navigation("VendorsZones");

                    b.Navigation("ZonesMarkers");
                });
#pragma warning restore 612, 618
        }
    }
}
